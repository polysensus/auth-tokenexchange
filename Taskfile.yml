---
version: '3'
silent: true

env:
  ENV: .local/dev
  PROFILE: '{{.PROFILE | default ""}}'
  # This override is provided so that the generate task can be used to
  # quick start consumers of this repository with useful defaults.
  K8S_GENERATE_DIR: '{{.K8S_GENERATE_DIR | default "k8s/tmp"}}'

vars:
  BUILD_ARTIFACTS: k8s/tmp/skaffold/build-artifacts.json

dotenv: [".env", '{{.ENV}}/.env', '{{.HOME}}/.env']

tasks:

  bootstrap:
    desc: |
      creates the {{.ENV}}/.env file and installs tooling. assumes a debain
      like system (but uses python or brew where possible). for other platforms
      run `task bootstrap --sumarize` and use the results to find the right
      bits.  Note that .env (in the directory containing this Taskfile) is
      never created or touched in anyway and has the highest precedence

      NOTICE: to re-create {{.ENV}}/.env you MUST delete it first (else it will
      be re-created with the same values

    cmds:
      - |
        set -e

        # Deal with variables which have automatic, rather than litteral,
        # defaults
        CONTEXT="{{.CONTEXT}}"
        [ -z "${CONTEXT}" ] && CONTEXT=$(kubectl config current-context)
        CLUSTER="{{.CLUSTER}}"
        [ -z "${CLUSTER}" ] && CLUSTER=$(kubectl config get-contexts ${CONTEXT} --no-headers=true | tr -s ' ' | cut -d ' ' -f3)
        SKAFFOLD_DEFAULT_REPO="{{.SKAFFOLD_DEFAULT_REPO}}"
        [ -z "${SKAFFOLD_DEFAULT_REPO}" ] && SKAFFOLD_DEFAULT_REPO="eu.gcr.io/${CONTEXT}"
        CONTEXT_NAMESPACE={{.CONTEXT_NAMESPACE}}
        [ -z "${CONTEXT_NAMESPACE}" ] && CONTEXT_NAMESPACE=$(echo -n ${CONTEXT} | cut -d '-' -f1)
        TOKEN_PROVIDER={{.TOKEN_PROVIDER}}
        [ -z "$TOKEN_PROVIDER" ] && TOKEN_PROVIDER="https://{{.APPNAME}}.${CONTEXT_NAMESPACE}.{{.DOMAIN}}"

        mkdir -p {{.ENV}}
        # automatic defaults first
        cat <<EOF > {{.ENV}}/.env
        CONTEXT=${CONTEXT}
        CLUSTER=${CLUSTER}
        SKAFFOLD_DEFAULT_REPO=${SKAFFOLD_DEFAULT_REPO}
        CONTEXT_NAMESPACE=${CONTEXT_NAMESPACE}
        TOKEN_PROVIDER=${TOKEN_PROVIDER}
        EOF

        # literal defaults
        cat <<EOF >> {{.ENV}}/.env
        NAMESPACE={{.NAMESPACE}}
        APPNAME={{.APPNAME}}
        PYENV={{.PYENV}}
        PROFILE={{.PROFILE}}
        PORT={{.PORT}}
        HOST={{.HOST}}
        TOKEN={{.TOKEN}}
        CLIENT_SCOPES={{.CLIENT_SCOPES}}
        DOMAIN={{.DOMAIN}}
        EOF

        python3 -m venv {{.PYENV}}
        {{.PYENV}}/bin/pip3 install -r requirements.txt

    vars:
      CONTEXT: '{{.CONTEXT | default (env "CONTEXT") }}'
      CONTEXT_NAMESPACE: '{{.CONTEXT_NAMESPACE | default (env "CONTEXT_NAMESPACE") }}'
      NAMESPACE: '{{.NAMESPACE | default (env "NAMESPACE") | default "hoy-iam-dev" }}'
      TAG: '{{.TAG | default (env "TAG") | default "master-latest" }}'
      SKAFFOLD_DEFAULT_REPO: '{{.SKAFFOLD_DEFAULT_REPO | default (env "SKAFFOLD_DEFAULT_REPO") }}'
      APPNAME: '{{.APPNAME | default (env "APPNAME") | default "auth-tokenexchange"}}'
      PYENV: '{{.PYENV | default (env "PYENV") | default "env"}}'
      PROFILE: '{{.PROFILE | default (env "PROFILE")}}'
      PORT: '{{.PORT | default (env "PORT") | default "3000"}}'
      HOST: '{{.HOST | default (env "HOST") | default "http://127.0.0.1:3000"}}'
      CLIENT_SCOPES: '{{.CLIENT_SCOPES | default (env "CLIENT_SCOPES") | default "email openid rpc://admin_nodeInfo rpc://eth_blockNumber rpc://eth_* rpc://rpc_modules"}}'
      DOMAIN: '{{.DOMAIN | default (env "DOMAIN") | default "polysensus.io"}}'
      TOKEN_PROVIDER: '{{.TOKEN_PROVIDER | default (env "TOKEN_PROVIDER") }}'

  generate:
    desc: 'generate context dependent manifests and secrets and so on'
    cmds:
      - |
        mkdir -p {{.K8S_GENERATE_DIR}}/dev
        mkdir -p $(dirname {{.BUILD_ARTIFACTS}})

        CLIENT_ID="{{.CLIENT_ID}}"
        [ -z "${CLIENT_ID}" ] && CLIENT_ID=${NAMESPACE}
        CLIENT_SECRET="{{.CLIENT_SECRET}}"
        [ -z "${CLIENT_SECRET}" ] && CLIENT_SECRET="$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c16)"

        cat <<EOF > {{.K8S_GENERATE_DIR}}/dev/clients.json
        [
            {
              "client_id": "${CLIENT_ID}",
              "client_secret": "${CLIENT_SECRET}",
              "response_types": [],
              "redirect_uris": [],
              "id_token_signed_response_alg": "ES256",
              "scope": "{{.CLIENT_SCOPES}}"
            }
         ]
        EOF
        cat <<EOF > {{.K8S_GENERATE_DIR}}/dev/clientidsecret.env
        CLIENT_ID=${CLIENT_ID}
        CLIENT_SECRET=${CLIENT_SECRET}
        EOF

        cat <<PYEND | python3 > {{.K8S_GENERATE_DIR}}/dev/provider-signing-key.json
        import json
        import jwcrypto.jwk
        key = jwcrypto.jwk.JWK.generate(kty="EC", alg="ES256", crv="P-256", use="sig")
        jwk = key.export(as_dict=True)
        print(json.dumps(jwk, sort_keys=True, indent=2))
        PYEND

        # No need to create a namespace if we deply the dev workload to a
        # fluxcd owned namespace

        cat <<EOF > {{.K8S_GENERATE_DIR}}/dev/namespace.yaml
        kind: Namespace
        apiVersion: v1
        metadata:
          name: ${NAMESPACE}
        EOF
        cat <<EOF > {{.K8S_GENERATE_DIR}}/dev/kustomization.yaml
        namespace: ${NAMESPACE}
        resources:
          #- ./namespace.yaml
          - ./../../base/default-config
          - ./../../base
        configMapGenerator:
          - name: auth-tokenexchange
            behavior: merge
            files:
              - clients.json
            literals:
              - PROVIDER=$TOKEN_PROVIDER
        secretGenerator:
          - name: auth-tokenexchange-provider-signing-key
            files:
              - provider-signing-key.json
          - name: auth-tokenexchange-clientid-secret
            envs:
              - clientidsecret.env
        EOF

    vars:
      CLIENT_ID: '{{.CLIENT_ID | default (env "CLIENT_ID") }}'
      CLIENT_SECRET: '{{.CLIENT_SECRET | default (env "CLIENT_SECRET") }}'

    generates:
      - "{{.K8S_GENERATE_DIR}}/dev/kustomization.yaml"
      - "{{.K8S_GENERATE_DIR}}/dev/namespace.yaml"
      - "{{.K8S_GENERATE_DIR}}/dev/clients.json"
      - "{{.K8S_GENERATE_DIR}}/dev/clientidsecret.env"
      - "{{.K8S_GENERATE_DIR}}/dev/provider-signing-key.json"

  build:
    desc: 'build the images'
    cmds:
      - |
        TAG="{{.TAG}}"
        skaffold build \
          ${PROFILE:+-p $PROFILE} \
          ${TAG:+-t $TAG} \
          --file-output {{.BUILD_ARTIFACTS}}
    vars:
      TAG: '{{.TAG | default (env "TAG") }}'


  suspend-cd:
    desc: |
      suspend flux cd for the appname in the target namespace. this is
      essential before attempting remote debug sessions via vscode kubernetes+skaffold

    cmds:
      - |
        flux suspend kustomization -n $NAMESPACE $APPNAME

  resume-cd:
    desc: "suspend flux cd for the appname in the target namespace"
    cmds:
      - |
        flux resume kustomization -n $NAMESPACE $APPNAME
        flux reconcile kustomization -n $NAMESPACE $APPNAME

  deploy:
    desc: 'deploy the app using skaffold'
    deps: [suspend-cd]
    precondition:
      - test: -f {{.BUILD_ARTIFACTS}}
        msg: "{{.BUILD_ARTIFACTS}} is missing, run `task build` first"
    cmds:
      - |
        skaffold deploy \
            ${CONTEXT:+--kube-context ${CONTEXT}} \
            ${NAMESPACE:+-n $NAMESPACE} \
            --build-artifacts {{.BUILD_ARTIFACTS}}

  down:
    desc: 'take the app down and clean up the k8s resources'
    cmds:
      - |
        echo "STOP: this will take down the full chain1 namespace" && exit 1
        skaffold delete \
            ${CONTEXT:+--kube-context ${CONTEXT}} \
            ${NAMESPACE:+-n $NAMESPACE}
